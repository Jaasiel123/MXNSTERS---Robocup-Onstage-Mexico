// This code was made for the Robocup 2022 - Onstage.
// Team MXNSTERS - Mexico.
// Single tube bot. Made by Jaasiel Neftali Vázquez Rodríguez


#include <Adafruit_NeoPixel.h> // Library for the neopixel strip
#include "Simple_MPU6050.h" // Library for the MPU6050
#define MPU6050_DEFAULT_ADDRESS     0x68 // Address pin low (GND), default for InvenSense evaluation board

Simple_MPU6050 mpu; // Creation of object mpu 
Adafruit_NeoPixel tubo = Adafruit_NeoPixel(16, 13, NEO_GRB + NEO_KHZ800); // creation of object "strip"

//*****************************
//******                Print Funcitons                ********
//*****************************
//Gyro, Accel and Quaternion
int leds;

int PrintAllValues(int16_t *gyro, int16_t *accel, int32_t *quat, uint16_t SpamDelay = 100) {
  Quaternion q;
  VectorFloat gravity;
  float ypr[3] = { 0, 0, 0 };
  float xyz[3] = { 0, 0, 0 };
  mpu.GetQuaternion(&q, quat);
  mpu.GetGravity(&gravity, &q);
  mpu.GetYawPitchRoll(ypr, &q, &gravity);
  mpu.ConvertToDegrees(ypr, xyz);
  Serial.print(F("Yaw "));   Serial.print(xyz[0]);   Serial.print(F(",   "));
  Serial.print(F("Pitch ")); Serial.print(xyz[1]);   Serial.print(F(",   "));
  Serial.print(F("Roll "));  Serial.print(xyz[2]);   Serial.print(F(",   "));
  Serial.println();
  
// If it is from 1 degree positive what it does is that the leds will be increased one by one according 
// to the movement of the degrees that are made, in this case red.
// Using the roll, i.e. accelerometer

      if ( xyz[2] > 1.0 ){     
        
    tubo.setPixelColor(leds, 255, 0, 0);
    tubo.show ();
    delay (10);
    if (leds < 16){  // We put this if so that the leds have a limit up to 16, which are the neopixels that the strip has and prevent it
                     // from exceeding that number and continue counting when it remains pointing in the positive degrees.
      leds++;  
    }   
   
    }

// If it is from 1 degree negative what it does is that the leds will be decreased one by one according 
// to the movement of the degrees that are made, in this case green
.
      else if ( xyz[2] < -1.0){    
    
    tubo.setPixelColor(leds, 0, 255, 0);
    tubo.show ();
    delay (10);
    
     if (leds > 0){  // We put this if so that the leds have a limit up to 0, which are the neopixels that the strip has and prevent it
                     // from exceeding that number and continue counting when it remains pointing in the negative degrees.
     leds--;  
    }   
      }
}


//******              Callback Funciton                ********


// See mpu.on_FIFO(print_Values); in the Setup Loop
void print_Values (int16_t *gyro, int16_t *accel, int32_t *quat, uint32_t *timestamp) {
  uint8_t Spam_Delay = 100; // Built in Blink without delay timer preventing Serial.print SPAM
  PrintAllValues(gyro, accel, quat, Spam_Delay);
}


//******                Setup and Loop                 ********


void setup() {
  uint8_t val;
  // join I2C bus (I2Cdev library doesn't do this automatically)
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
  Wire.begin();
  Wire.setClock(400000); // 400kHz I2C clock. Comment this line if having compilation difficulties
#ifdef _AVR_  
  Wire.setWireTimeout(3000, true); //timeout value in uSec
#endif
#elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
  Fastwire::setup(400, true);
#endif
  // initialize serial communication
  Serial.begin(115200);
  while (!Serial); // wait for Leonardo enumeration, others continue immediately
  Serial.println(F("Start:"));

  // Setup the MPU
    mpu.Set_DMP_Output_Rate_Hz(10);           // Set the DMP output rate from 200Hz to 5 Minutes.
  mpu.SetAddress(MPU6050_DEFAULT_ADDRESS); //Sets the address of the MPU.
  mpu.CalibrateMPU();                      // Calibrates the MPU.
  mpu.load_DMP_Image();                    // Loads the DMP image into the MPU and finish configuration.
  mpu.on_FIFO(print_Values);               // Set callback function that is triggered when FIFO Data is retrieved
  // Setup is complete!
  
}

void loop() {
  static unsigned long FIFO_DelayTimer;
  if ((millis() - FIFO_DelayTimer) >= (99)) { // 99ms instead of 100ms to start polling the MPU 1ms prior to data arriving.
    if( mpu.dmp_read_fifo(false)) FIFO_DelayTimer= millis() ; // false = no interrupt pin attachment required and When data arrives in the FIFO Buffer reset the timer
  }
  // dmp_read_fifo(false) does the following
  // Tests for Data in the FIFO Buffer
  // when it finds data it runs the mpu.on_FIFO(print_Values)
  // the print_Values functin which we set run the PrintAllValues Function
  // When data is caputred dmp_read_fifo will return true.
  // The print_Values function MUST have the following variables available to attach data
  // void print_Values (int16_t *gyro, int16_t *accel, int32_t *quat, uint32_t *timestamp)
  // Variables:
  // int16_t *gyro for the gyro values to be passed to it (The * tells the function it will be a pointer to the value)
  // int16_t *accel for the accel values to be passed to it
  // int32_t *quat for the quaternion values to be passed to it
  // uint32_t *timestamp which will be the micros()value at the time we retrieved the Newest value from the FIFO Buffer.
}